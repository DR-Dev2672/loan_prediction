{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "80d7a37c-1540-472b-9850-76dce7b0d95e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b29f20d9-4b96-41d3-9e29-32eff286cee6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LP001002</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>5849</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LP001003</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>4583</td>\n",
       "      <td>1508.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LP001005</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LP001006</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>2583</td>\n",
       "      <td>2358.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>LP001008</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>6000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n",
       "0  LP001002   Male      No          0      Graduate            No   \n",
       "1  LP001003   Male     Yes          1      Graduate            No   \n",
       "2  LP001005   Male     Yes          0      Graduate           Yes   \n",
       "3  LP001006   Male     Yes          0  Not Graduate            No   \n",
       "4  LP001008   Male      No          0      Graduate            No   \n",
       "\n",
       "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
       "0             5849                0.0         NaN             360.0   \n",
       "1             4583             1508.0       128.0             360.0   \n",
       "2             3000                0.0        66.0             360.0   \n",
       "3             2583             2358.0       120.0             360.0   \n",
       "4             6000                0.0       141.0             360.0   \n",
       "\n",
       "   Credit_History Property_Area Loan_Status  \n",
       "0             1.0         Urban           Y  \n",
       "1             1.0         Rural           N  \n",
       "2             1.0         Urban           Y  \n",
       "3             1.0         Urban           Y  \n",
       "4             1.0         Urban           Y  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"train.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fc44dc68-8e16-4df7-a434-cdf8fc598a66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>609</th>\n",
       "      <td>LP002978</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>2900</td>\n",
       "      <td>0.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>610</th>\n",
       "      <td>LP002979</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3+</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>4106</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>611</th>\n",
       "      <td>LP002983</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8072</td>\n",
       "      <td>240.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>612</th>\n",
       "      <td>LP002984</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>7583</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>613</th>\n",
       "      <td>LP002990</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4583</td>\n",
       "      <td>0.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Semiurban</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Loan_ID  Gender Married Dependents Education Self_Employed  \\\n",
       "609  LP002978  Female      No          0  Graduate            No   \n",
       "610  LP002979    Male     Yes         3+  Graduate            No   \n",
       "611  LP002983    Male     Yes          1  Graduate            No   \n",
       "612  LP002984    Male     Yes          2  Graduate            No   \n",
       "613  LP002990  Female      No          0  Graduate           Yes   \n",
       "\n",
       "     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
       "609             2900                0.0        71.0             360.0   \n",
       "610             4106                0.0        40.0             180.0   \n",
       "611             8072              240.0       253.0             360.0   \n",
       "612             7583                0.0       187.0             360.0   \n",
       "613             4583                0.0       133.0             360.0   \n",
       "\n",
       "     Credit_History Property_Area Loan_Status  \n",
       "609             1.0         Rural           Y  \n",
       "610             1.0         Rural           Y  \n",
       "611             1.0         Urban           Y  \n",
       "612             1.0         Urban           Y  \n",
       "613             0.0     Semiurban           N  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "24e5aa97-aaf6-4eeb-a90f-c9794c715fd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(614, 13)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c57de635-0789-4685-ba1e-854ebe828f26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 614 entries, 0 to 613\n",
      "Data columns (total 13 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Loan_ID            614 non-null    object \n",
      " 1   Gender             601 non-null    object \n",
      " 2   Married            611 non-null    object \n",
      " 3   Dependents         599 non-null    object \n",
      " 4   Education          614 non-null    object \n",
      " 5   Self_Employed      582 non-null    object \n",
      " 6   ApplicantIncome    614 non-null    int64  \n",
      " 7   CoapplicantIncome  614 non-null    float64\n",
      " 8   LoanAmount         592 non-null    float64\n",
      " 9   Loan_Amount_Term   600 non-null    float64\n",
      " 10  Credit_History     564 non-null    float64\n",
      " 11  Property_Area      614 non-null    object \n",
      " 12  Loan_Status        614 non-null    object \n",
      "dtypes: float64(4), int64(1), object(8)\n",
      "memory usage: 62.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8a34641e-bd60-414b-b03a-d5967d165688",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Loan_ID               0\n",
       "Gender               13\n",
       "Married               3\n",
       "Dependents           15\n",
       "Education             0\n",
       "Self_Employed        32\n",
       "ApplicantIncome       0\n",
       "CoapplicantIncome     0\n",
       "LoanAmount           22\n",
       "Loan_Amount_Term     14\n",
       "Credit_History       50\n",
       "Property_Area         0\n",
       "Loan_Status           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "86e0b22a-83f2-44da-8b3d-27a80232b815",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>614.000000</td>\n",
       "      <td>614.000000</td>\n",
       "      <td>592.000000</td>\n",
       "      <td>600.00000</td>\n",
       "      <td>564.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5403.459283</td>\n",
       "      <td>1621.245798</td>\n",
       "      <td>146.412162</td>\n",
       "      <td>342.00000</td>\n",
       "      <td>0.842199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6109.041673</td>\n",
       "      <td>2926.248369</td>\n",
       "      <td>85.587325</td>\n",
       "      <td>65.12041</td>\n",
       "      <td>0.364878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>150.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>12.00000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2877.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>360.00000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3812.500000</td>\n",
       "      <td>1188.500000</td>\n",
       "      <td>128.000000</td>\n",
       "      <td>360.00000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5795.000000</td>\n",
       "      <td>2297.250000</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>360.00000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>81000.000000</td>\n",
       "      <td>41667.000000</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>480.00000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
       "count       614.000000         614.000000  592.000000         600.00000   \n",
       "mean       5403.459283        1621.245798  146.412162         342.00000   \n",
       "std        6109.041673        2926.248369   85.587325          65.12041   \n",
       "min         150.000000           0.000000    9.000000          12.00000   \n",
       "25%        2877.500000           0.000000  100.000000         360.00000   \n",
       "50%        3812.500000        1188.500000  128.000000         360.00000   \n",
       "75%        5795.000000        2297.250000  168.000000         360.00000   \n",
       "max       81000.000000       41667.000000  700.000000         480.00000   \n",
       "\n",
       "       Credit_History  \n",
       "count      564.000000  \n",
       "mean         0.842199  \n",
       "std          0.364878  \n",
       "min          0.000000  \n",
       "25%          1.000000  \n",
       "50%          1.000000  \n",
       "75%          1.000000  \n",
       "max          1.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()   #bydefault interger column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3cdbe5f4-1f26-4a3a-8d5f-ebe1ad987ab1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      5849\n",
       "1      4583\n",
       "2      3000\n",
       "3      2583\n",
       "4      6000\n",
       "       ... \n",
       "609    2900\n",
       "610    4106\n",
       "611    8072\n",
       "612    7583\n",
       "613    4583\n",
       "Name: ApplicantIncome, Length: 614, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ApplicantIncome']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fd46d8a4-6ded-4135-9123-3e9d91c6f73b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5849</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4583</td>\n",
       "      <td>128.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3000</td>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2583</td>\n",
       "      <td>120.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6000</td>\n",
       "      <td>141.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>609</th>\n",
       "      <td>2900</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>610</th>\n",
       "      <td>4106</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>611</th>\n",
       "      <td>8072</td>\n",
       "      <td>253.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>612</th>\n",
       "      <td>7583</td>\n",
       "      <td>187.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>613</th>\n",
       "      <td>4583</td>\n",
       "      <td>133.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>614 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ApplicantIncome  LoanAmount\n",
       "0               5849         NaN\n",
       "1               4583       128.0\n",
       "2               3000        66.0\n",
       "3               2583       120.0\n",
       "4               6000       141.0\n",
       "..               ...         ...\n",
       "609             2900        71.0\n",
       "610             4106        40.0\n",
       "611             8072       253.0\n",
       "612             7583       187.0\n",
       "613             4583       133.0\n",
       "\n",
       "[614 rows x 2 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['ApplicantIncome', 'LoanAmount']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c7628640-d991-4cc8-8556-640b5e8f87bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Loan_ID', 'Gender', 'Married', 'Dependents', 'Education',\n",
       "       'Self_Employed', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount',\n",
       "       'Loan_Amount_Term', 'Credit_History', 'Property_Area', 'Loan_Status'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a84427d9-a175-41b1-8ea9-3f54723d4546",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Loan_ID               0\n",
       "Gender               13\n",
       "Married               3\n",
       "Dependents           15\n",
       "Education             0\n",
       "Self_Employed        32\n",
       "ApplicantIncome       0\n",
       "CoapplicantIncome     0\n",
       "LoanAmount           22\n",
       "Loan_Amount_Term     14\n",
       "Credit_History       50\n",
       "Property_Area         0\n",
       "Loan_Status           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9c545ecb-7927-47d9-a83a-bbedc65d5e05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 614 entries, 0 to 613\n",
      "Data columns (total 13 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Loan_ID            614 non-null    object \n",
      " 1   Gender             601 non-null    object \n",
      " 2   Married            611 non-null    object \n",
      " 3   Dependents         599 non-null    object \n",
      " 4   Education          614 non-null    object \n",
      " 5   Self_Employed      582 non-null    object \n",
      " 6   ApplicantIncome    614 non-null    int64  \n",
      " 7   CoapplicantIncome  614 non-null    float64\n",
      " 8   LoanAmount         592 non-null    float64\n",
      " 9   Loan_Amount_Term   600 non-null    float64\n",
      " 10  Credit_History     564 non-null    float64\n",
      " 11  Property_Area      614 non-null    object \n",
      " 12  Loan_Status        614 non-null    object \n",
      "dtypes: float64(4), int64(1), object(8)\n",
      "memory usage: 62.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2f51b852-cda7-4283-aea5-a1b2c0e8c17a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# handle numerical missing data\n",
    "df['LoanAmount'] = df['LoanAmount'].fillna(df['LoanAmount'].mean())\n",
    "df['Loan_Amount_Term'] = df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mean())\n",
    "df['Credit_History'] = df['Credit_History'].fillna(df['Credit_History'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9ad985c6-d3f0-4f23-a3e8-7b3493117c9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Loan_ID               0\n",
       "Gender               13\n",
       "Married               3\n",
       "Dependents           15\n",
       "Education             0\n",
       "Self_Employed        32\n",
       "ApplicantIncome       0\n",
       "CoapplicantIncome     0\n",
       "LoanAmount            0\n",
       "Loan_Amount_Term      0\n",
       "Credit_History        0\n",
       "Property_Area         0\n",
       "Loan_Status           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1b782748-96df-4448-88fc-65bcd2c35b14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Male'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# handle categorical missing data\n",
    "df['Gender'].mode()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c54ab666-3e22-41a6-92a1-1ff24f330b95",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Gender'] = df['Gender'].fillna(df['Gender'].mode()[0])\n",
    "df['Married'] = df['Married'].fillna(df['Married'].mode()[0])\n",
    "df['Dependents'] = df['Dependents'].fillna(df['Dependents'].mode()[0])\n",
    "df['Self_Employed'] = df['Self_Employed'].fillna(df['Self_Employed'].mode()[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3697f5b2-04cd-42f8-b9d7-255f23cf2b55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Loan_ID              0\n",
       "Gender               0\n",
       "Married              0\n",
       "Dependents           0\n",
       "Education            0\n",
       "Self_Employed        0\n",
       "ApplicantIncome      0\n",
       "CoapplicantIncome    0\n",
       "LoanAmount           0\n",
       "Loan_Amount_Term     0\n",
       "Credit_History       0\n",
       "Property_Area        0\n",
       "Loan_Status          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "612c0974-8df6-44f9-812b-edba4e6431ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip install seaborn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a3342409-151a-468d-8587-c2a42ef937f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='count', ylabel='Gender'>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# categorical data\n",
    "import seaborn as sns\n",
    "sns.countplot(df['Gender'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b462202e-384a-4c2a-8e1d-0508a67e92f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='count', ylabel='Dependents'>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df.Dependents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "822320bb-b417-4d53-b66f-a90ec83da703",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "x = [10,20,30,40,50]\n",
    "y = [12,34,23,43,30]\n",
    "plt.plot(x,y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "83780d21-2077-433c-9127-9caf2f4e3cd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='count', ylabel='Dependents'>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df.Dependents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "012f21e3-32db-46a9-961a-677a3f56f07e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhYAAAGdCAYAAABO2DpVAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAWNklEQVR4nO3dbWyddfnA8asb9PDUdoyxh7ruAdARGJthwtIQEVkFloUM8QVGEicaCFgMODVQE5mYmC6YEFGXQXzaG2CIcRAxgDjoFs0GrLDwJAsjw9WwByGhHYUVst7/F4T6rzDYGVfP6dk+n+ROOKd3ua/88kv2zX1Oz6kriqIIAIAEY6o9AABw6BAWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAECaIyp9wcHBwXj11VejoaEh6urqKn15AOAgFEURe/bsiebm5hgzZv/3JSoeFq+++mq0tLRU+rIAQIKenp6YOnXqfn9e8bBoaGiIiPcGa2xsrPTlAYCD0NfXFy0tLUP/ju9PxcPi/Zc/GhsbhQUA1JiPexuDN28CAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGkq/u2m75u97OEYUzqmWpevuFeWL6r2CAAw4tyxAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAIM0nCovly5dHXV1dXH/99UnjAAC17KDD4sknn4w77rgj5syZkzkPAFDDDios3nzzzbj88svj17/+dRx//PHZMwEANeqgwqK9vT0WLVoUbW1tH3vuwMBA9PX1DTsAgEPTEeX+wurVq+Opp56KJ5988oDO7+zsjJtvvrnswQCA2lPWHYuenp647rrr4s4774yjjjrqgH6no6Mjent7h46enp6DGhQAGP3KumPR3d0du3fvjjPPPHPouX379sX69evjV7/6VQwMDMTYsWOH/U6pVIpSqZQzLQAwqpUVFgsWLIhnn3122HNXXHFFnHrqqXHDDTd8ICoAgMNLWWHR0NAQs2fPHvbcscceGyeccMIHngcADj8+eRMASFP2X4X8r66uroQxAIBDgTsWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApPnEH+ldaa8sX1TtEQCA/XDHAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDRlhcXKlStjzpw50djYGI2NjdHa2hoPPvjgSM0GANSYssJi6tSpsXz58uju7o5NmzbF+eefH4sXL47nn39+pOYDAGrIEeWcfPHFFw97/NOf/jRWrlwZGzdujNNPPz11MACg9pQVFv/fvn374t57743+/v5obW3d73kDAwMxMDAw9Livr+9gLwkAjHJlv3nz2WefjeOOOy5KpVJcffXVsWbNmjjttNP2e35nZ2c0NTUNHS0tLZ9oYABg9Co7LGbNmhWbN2+Oxx9/PK655ppYsmRJvPDCC/s9v6OjI3p7e4eOnp6eTzQwADB6lf1SSH19fZxyyikRETFv3rx48skn47bbbos77rjjQ88vlUpRKpU+2ZQAQE34xJ9jMTg4OOw9FADA4ausOxYdHR2xcOHCmDZtWuzZsyfuuuuu6Orqiocffnik5gMAakhZYbF79+74+te/Hjt27IimpqaYM2dOPPzww/GlL31ppOYDAGpIWWHx29/+dqTmAAAOAb4rBABIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIc0S1ByjXjBv/Uu0RKu6V5YuqPQIAHBB3LACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACA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/X+3P+4DuyseFq+//npERLS0tFT60gDAJ7Rnz55oamra788rHhbjx4+PiIjt27d/5GC8p6+vL1paWqKnp8d3qxwA61Ue61Ue61U+a1ae0bxeRVHEnj17orm5+SPPq3hYjBnz3ts6mpqaRt2ijWaNjY3WqwzWqzzWqzzWq3zWrDyjdb0O5IaAN28CAGmEBQCQpuJhUSqVYtmyZVEqlSp96ZpkvcpjvcpjvcpjvcpnzcpzKKxXXfFxfzcCAHCAvBQCAKQRFgBAGmEBAKQRFgBAmoqGxYoVK2LGjBlx1FFHxfz58+OJJ56o5OVrxo9//OOoq6sbdpx66qnVHmtUWb9+fVx88cXR3NwcdXV1cd999w37eVEUcdNNN8WUKVPi6KOPjra2tnjppZeqM+wo8HHr9Y1vfOMDe+6iiy6qzrCjQGdnZ5x11lnR0NAQEydOjEsuuSS2bNky7Jy9e/dGe3t7nHDCCXHcccfFV77yldi1a1eVJq6uA1mv88477wN77Oqrr67SxNW1cuXKmDNnztCHYLW2tsaDDz449PNa31sVC4t77rknli5dGsuWLYunnnoq5s6dGxdeeGHs3r27UiPUlNNPPz127NgxdPz973+v9kijSn9/f8ydOzdWrFjxoT+/5ZZb4he/+EXcfvvt8fjjj8exxx4bF154Yezdu7fCk44OH7deEREXXXTRsD139913V3DC0WXdunXR3t4eGzdujEceeSTefffduOCCC6K/v3/onO9+97vx5z//Oe69995Yt25dvPrqq3HppZdWcerqOZD1ioi48sorh+2xW265pUoTV9fUqVNj+fLl0d3dHZs2bYrzzz8/Fi9eHM8//3xEHAJ7q6iQs88+u2hvbx96vG/fvqK5ubno7Oys1Ag1Y9myZcXcuXOrPUbNiIhizZo1Q48HBweLyZMnFz/72c+GnnvjjTeKUqlU3H333VWYcHT53/UqiqJYsmRJsXjx4qrMUwt2795dRESxbt26oije209HHnlkce+99w6d889//rOIiGLDhg3VGnPU+N/1Koqi+MIXvlBcd9111RtqlDv++OOL3/zmN4fE3qrIHYt33nknuru7o62tbei5MWPGRFtbW2zYsKESI9Scl156KZqbm+Okk06Kyy+/PLZv317tkWrGtm3bYufOncP2W1NTU8yfP99++whdXV0xceLEmDVrVlxzzTVD30RMRG9vb0T890sUu7u749133x22x0499dSYNm2aPRYfXK/33XnnnTFhwoSYPXt2dHR0xFtvvVWN8UaVffv2xerVq6O/vz9aW1sPib1VkS8he+2112Lfvn0xadKkYc9PmjQpXnzxxUqMUFPmz58fq1atilmzZsWOHTvi5ptvjs9//vPx3HPPRUNDQ7XHG/V27twZEfGh++39nzHcRRddFJdeemnMnDkzXn755fjhD38YCxcujA0bNsTYsWOrPV5VDQ4OxvXXXx/nnHNOzJ49OyLe22P19fUxbty4YefaYx++XhERX/va12L69OnR3NwczzzzTNxwww2xZcuW+NOf/lTFaavn2WefjdbW1ti7d28cd9xxsWbNmjjttNNi8+bNNb+3Kv7tpny8hQsXDv33nDlzYv78+TF9+vT4wx/+EN/61reqOBmHqq9+9atD/33GGWfEnDlz4uSTT46urq5YsGBBFServvb29njuuee8z+kA7W+9rrrqqqH/PuOMM2LKlCmxYMGCePnll+Pkk0+u9JhVN2vWrNi8eXP09vbGH//4x1iyZEmsW7eu2mOlqMhLIRMmTIixY8d+4F2tu3btismTJ1dihJo2bty4+MxnPhNbt26t9ig14f09Zb8dvJNOOikmTJhw2O+5a6+9Nh544IF47LHHYurUqUPPT548Od5555144403hp1/uO+x/a3Xh5k/f35ExGG7x+rr6+OUU06JefPmRWdnZ8ydOzduu+22Q2JvVSQs6uvrY968ebF27dqh5wYHB2Pt2rXR2tpaiRFq2ptvvhkvv/xyTJkypdqj1ISZM2fG5MmTh+23vr6+ePzxx+23A/Tvf/87Xn/99cN2zxVFEddee22sWbMmHn300Zg5c+awn8+bNy+OPPLIYXtsy5YtsX379sNyj33cen2YzZs3R0Qctnvsfw0ODsbAwMChsbcq9S7R1atXF6VSqVi1alXxwgsvFFdddVUxbty4YufOnZUaoWZ873vfK7q6uopt27YV//jHP4q2trZiwoQJxe7du6s92qixZ8+e4umnny6efvrpIiKKW2+9tXj66aeLf/3rX0VRFMXy5cuLcePGFffff3/xzDPPFIsXLy5mzpxZvP3221WevDo+ar327NlTfP/73y82bNhQbNu2rfjb3/5WnHnmmcWnP/3pYu/evdUevSquueaaoqmpqejq6ip27NgxdLz11ltD51x99dXFtGnTikcffbTYtGlT0draWrS2tlZx6ur5uPXaunVr8ZOf/KTYtGlTsW3btuL+++8vTjrppOLcc8+t8uTVceONNxbr1q0rtm3bVjzzzDPFjTfeWNTV1RV//etfi6Ko/b1VsbAoiqL45S9/WUybNq2or68vzj777GLjxo2VvHzNuOyyy4opU6YU9fX1xac+9anisssuK7Zu3VrtsUaVxx57rIiIDxxLliwpiuK9Pzn90Y9+VEyaNKkolUrFggULii1btlR36Cr6qPV66623igsuuKA48cQTiyOPPLKYPn16ceWVVx7W0f9haxURxe9///uhc95+++3i29/+dnH88ccXxxxzTPHlL3+52LFjR/WGrqKPW6/t27cX5557bjF+/PiiVCoVp5xySvGDH/yg6O3tre7gVfLNb36zmD59elFfX1+ceOKJxYIFC4aioihqf2/52nQAII3vCgEA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACDN/wHzKwo0l3Y4sQAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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S6K3t3eo5gMAqsiYck5++OGHBz1evXp1TJgwITo7O+PCCy9MHQwAqD5lhcX/6u7ujoiIcePGHfKcvr6+6OvrG3jc09PzSS4JAIxgh/3izf7+/rjxxhvjggsuiJkzZx7yvPb29mhoaBg4mpqaDveSAMAId9hh0draGlu3bo01a9Z86HltbW3R3d09cHR1dR3uJQGAEe6wfhWyZMmSePDBB2PDhg0xZcqUDz23VCpFqVQ6rOEAgOpSVlgURRHf+c53Yu3atdHR0RHTp08fqrkAgCpUVli0trbG3XffHQ888EDU1dXF7t27IyKioaEhjjvuuCEZEACoHmW9xmLVqlXR3d0dF110UUyePHnguPfee4dqPgCgipT9qxAAgEPxWSEAQJpP9AZZfHyn3vyXw/7eV1YsTJwEAIaOOxYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQJoxlR6gXK+sWFjpEQCAQ3DHAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIU1ZYrFq1KmbNmhX19fVRX18fzc3N8dBDDw3VbABAlSkrLKZMmRIrVqyIzs7O2Lx5c1x88cWxaNGieP7554dqPgCgiowp5+TLLrts0OOf/vSnsWrVqti0aVOcffbZqYMBANWnrLD4/w4cOBD33Xdf9Pb2RnNz8yHP6+vri76+voHHPT09h3tJAGCEK/vFm88991yceOKJUSqV4rrrrou1a9fGWWeddcjz29vbo6GhYeBoamr6RAMDACNX2WExY8aM2LJlSzzxxBNx/fXXx+LFi+OFF1445PltbW3R3d09cHR1dX2igQGAkavsX4XU1tbGGWecERERc+bMiaeeeipuv/32uPPOOw96fqlUilKp9MmmBACqwid+H4v+/v5Br6EAAI5eZd2xaGtriwULFsTUqVNj3759cffdd0dHR0c88sgjQzUfAFBFygqLvXv3xte//vXYtWtXNDQ0xKxZs+KRRx6JL33pS0M1HwBQRcoKi9/+9rdDNQcAcATwWSEAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkGVPpAcp16s1/qfQIh+WVFQsrPQIADDl3LACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEjzicJixYoVUVNTEzfeeGPSOABANTvssHjqqafizjvvjFmzZmXOAwBUscMKizfffDOuuuqq+PWvfx0nnXRS9kwAQJU6rLBobW2NhQsXRktLy0ee29fXFz09PYMOAODINKbcb1izZk08/fTT8dRTT32s89vb22P58uVlDwYAVJ+y7lh0dXXFDTfcEHfddVcce+yxH+t72traoru7e+Do6uo6rEEBgJGvrDsWnZ2dsXfv3jj33HMHnjtw4EBs2LAhfvWrX0VfX1+MHj160PeUSqUolUo50wIAI1pZYTFv3rx47rnnBj139dVXx5lnnhk33XTTB6ICADi6lBUWdXV1MXPmzEHPnXDCCXHyySd/4HkA4OjjnTcBgDRl/1XI/+ro6EgYAwA4ErhjAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCk+cTvvHm4ti6fH/X19ZW6PAAwBNyxAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSjBnuCxZFERERPT09w31pAOAwvf9z+/2f44cy7GHx+uuvR0REU1PTcF8aAPiE9u3bFw0NDYf8+rCHxbhx4yIiYufOnR86GO/p6emJpqam6Orqivr6+kqPM+JZr/JYr/JYr/JZs/KM5PUqiiL27dsXjY2NH3resIfFqFHvvayjoaFhxC3aSFZfX2+9ymC9ymO9ymO9ymfNyjNS1+vj3BDw4k0AII2wAADSDHtYlEqlWLZsWZRKpeG+dFWyXuWxXuWxXuWxXuWzZuU5EtarpviovxsBAPiY/CoEAEgjLACANMICAEgjLACANMMaFitXroxTTz01jj322Jg7d248+eSTw3n5qvHjH/84ampqBh1nnnlmpccaUTZs2BCXXXZZNDY2Rk1NTdx///2Dvl4URdxyyy0xefLkOO6446KlpSVeeumlygw7AnzUen3jG9/4wJ679NJLKzPsCNDe3h7nnXde1NXVxYQJE+Lyyy+Pbdu2DTpn//790draGieffHKceOKJ8ZWvfCX27NlToYkr6+Os10UXXfSBPXbddddVaOLKWrVqVcyaNWvgTbCam5vjoYceGvh6te+tYQuLe++9N5YuXRrLli2Lp59+OmbPnh3z58+PvXv3DtcIVeXss8+OXbt2DRx///vfKz3SiNLb2xuzZ8+OlStXHvTrt956a/ziF7+IO+64I5544ok44YQTYv78+bF///5hnnRk+Kj1ioi49NJLB+25e+65ZxgnHFnWr18fra2tsWnTpnj00Ufj3XffjUsuuSR6e3sHzvnud78bf/7zn+O+++6L9evXx6uvvhpXXHFFBaeunI+zXhER11xzzaA9duutt1Zo4sqaMmVKrFixIjo7O2Pz5s1x8cUXx6JFi+L555+PiCNgbxXD5Pzzzy9aW1sHHh84cKBobGws2tvbh2uEqrFs2bJi9uzZlR6jakREsXbt2oHH/f39xaRJk4qf/exnA8+98cYbRalUKu65554KTDiy/O96FUVRLF68uFi0aFFF5qkGe/fuLSKiWL9+fVEU7+2nY445prjvvvsGzvnnP/9ZRESxcePGSo05YvzvehVFUXzhC18obrjhhsoNNcKddNJJxW9+85sjYm8Nyx2Ld955Jzo7O6OlpWXguVGjRkVLS0ts3LhxOEaoOi+99FI0NjbGaaedFldddVXs3Lmz0iNVjR07dsTu3bsH7beGhoaYO3eu/fYhOjo6YsKECTFjxoy4/vrrBz6JmIju7u6I+O+HKHZ2dsa77747aI+deeaZMXXqVHssPrhe77vrrrti/PjxMXPmzGhra4u33nqrEuONKAcOHIg1a9ZEb29vNDc3HxF7a1g+hOy1116LAwcOxMSJEwc9P3HixHjxxReHY4SqMnfu3Fi9enXMmDEjdu3aFcuXL4/Pf/7zsXXr1qirq6v0eCPe7t27IyIOut/e/xqDXXrppXHFFVfE9OnT4+WXX44f/vCHsWDBgti4cWOMHj260uNVVH9/f9x4441xwQUXxMyZMyPivT1WW1sbY8eOHXSuPXbw9YqI+NrXvhbTpk2LxsbGePbZZ+Omm26Kbdu2xZ/+9KcKTls5zz33XDQ3N8f+/fvjxBNPjLVr18ZZZ50VW7Zsqfq9NeyfbspHW7BgwcC/Z82aFXPnzo1p06bFH/7wh/jWt75Vwck4Un31q18d+Pc555wTs2bNitNPPz06Ojpi3rx5FZys8lpbW2Pr1q1e5/QxHWq9rr322oF/n3POOTF58uSYN29evPzyy3H66acP95gVN2PGjNiyZUt0d3fHH//4x1i8eHGsX7++0mOlGJZfhYwfPz5Gjx79gVe17tmzJyZNmjQcI1S1sWPHxmc+85nYvn17pUepCu/vKfvt8J122mkxfvz4o37PLVmyJB588MF4/PHHY8qUKQPPT5o0Kd5555144403Bp1/tO+xQ63XwcydOzci4qjdY7W1tXHGGWfEnDlzor29PWbPnh233377EbG3hiUsamtrY86cObFu3bqB5/r7+2PdunXR3Nw8HCNUtTfffDNefvnlmDx5cqVHqQrTp0+PSZMmDdpvPT098cQTT9hvH9O///3veP3114/aPVcURSxZsiTWrl0bjz32WEyfPn3Q1+fMmRPHHHPMoD22bdu22Llz51G5xz5qvQ5my5YtERFH7R77X/39/dHX13dk7K3hepXomjVrilKpVKxevbp44YUXimuvvbYYO3ZssXv37uEaoWp873vfKzo6OoodO3YU//jHP4qWlpZi/Pjxxd69eys92oixb9++4plnnimeeeaZIiKK2267rXjmmWeKf/3rX0VRFMWKFSuKsWPHFg888EDx7LPPFosWLSqmT59evP322xWevDI+bL327dtXfP/73y82btxY7Nixo/jb3/5WnHvuucWnP/3pYv/+/ZUevSKuv/76oqGhoejo6Ch27do1cLz11lsD51x33XXF1KlTi8cee6zYvHlz0dzcXDQ3N1dw6sr5qPXavn178ZOf/KTYvHlzsWPHjuKBBx4oTjvttOLCCy+s8OSVcfPNNxfr168vduzYUTz77LPFzTffXNTU1BR//etfi6Ko/r01bGFRFEXxy1/+spg6dWpRW1tbnH/++cWmTZuG8/JV48orrywmT55c1NbWFp/61KeKK6+8sti+fXulxxpRHn/88SIiPnAsXry4KIr3/uT0Rz/6UTFx4sSiVCoV8+bNK7Zt21bZoSvow9brrbfeKi655JLilFNOKY455phi2rRpxTXXXHNUR//B1ioiit///vcD57z99tvFt7/97eKkk04qjj/++OLLX/5ysWvXrsoNXUEftV47d+4sLrzwwmLcuHFFqVQqzjjjjOIHP/hB0d3dXdnBK+Sb3/xmMW3atKK2trY45ZRTinnz5g1ERVFU/97ysekAQBqfFQIApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAECa/wM31gEhCF3dmgAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "data = np.random.exponential(1, 100)\n",
    "\n",
    "# Showing the first plot.\n",
    "plt.hist(data, bins=10)\n",
    "plt.show()\n",
    "\n",
    "# Cleaning the plot (useful if you want to draw new shapes without closing the figure\n",
    "# but quite useless for this particular example. I put it here as an example).\n",
    "plt.gcf().clear()\n",
    "\n",
    "# Showing the plot with horizontal orientation\n",
    "plt.hist(data, bins=10, orientation='horizontal')\n",
    "plt.show()\n",
    "\n",
    "# Cleaning the plot.\n",
    "plt.gcf().clear()\n",
    "\n",
    "# Showing the third plot with orizontal orientation and inverted y axis.\n",
    "plt.hist(data, bins=10, orientation='horizontal')\n",
    "plt.gca().invert_yaxis()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0ca97ba5-d050-4dde-bc88-b6d161b203cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhYAAAGdCAYAAABO2DpVAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAWNklEQVR4nO3dbWyddfnA8asb9PDUdoyxh7ruAdARGJthwtIQEVkFloUM8QVGEicaCFgMODVQE5mYmC6YEFGXQXzaG2CIcRAxgDjoFs0GrLDwJAsjw9WwByGhHYUVst7/F4T6rzDYGVfP6dk+n+ROOKd3ua/88kv2zX1Oz6kriqIIAIAEY6o9AABw6BAWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAECaIyp9wcHBwXj11VejoaEh6urqKn15AOAgFEURe/bsiebm5hgzZv/3JSoeFq+++mq0tLRU+rIAQIKenp6YOnXqfn9e8bBoaGiIiPcGa2xsrPTlAYCD0NfXFy0tLUP/ju9PxcPi/Zc/GhsbhQUA1JiPexuDN28CAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGkq/u2m75u97OEYUzqmWpevuFeWL6r2CAAw4tyxAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAIM0nCovly5dHXV1dXH/99UnjAAC17KDD4sknn4w77rgj5syZkzkPAFDDDios3nzzzbj88svj17/+dRx//PHZMwEANeqgwqK9vT0WLVoUbW1tH3vuwMBA9PX1DTsAgEPTEeX+wurVq+Opp56KJ5988oDO7+zsjJtvvrnswQCA2lPWHYuenp647rrr4s4774yjjjrqgH6no6Mjent7h46enp6DGhQAGP3KumPR3d0du3fvjjPPPHPouX379sX69evjV7/6VQwMDMTYsWOH/U6pVIpSqZQzLQAwqpUVFgsWLIhnn3122HNXXHFFnHrqqXHDDTd8ICoAgMNLWWHR0NAQs2fPHvbcscceGyeccMIHngcADj8+eRMASFP2X4X8r66uroQxAIBDgTsWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApPnEH+ldaa8sX1TtEQCA/XDHAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDRlhcXKlStjzpw50djYGI2NjdHa2hoPPvjgSM0GANSYssJi6tSpsXz58uju7o5NmzbF+eefH4sXL47nn39+pOYDAGrIEeWcfPHFFw97/NOf/jRWrlwZGzdujNNPPz11MACg9pQVFv/fvn374t57743+/v5obW3d73kDAwMxMDAw9Livr+9gLwkAjHJlv3nz2WefjeOOOy5KpVJcffXVsWbNmjjttNP2e35nZ2c0NTUNHS0tLZ9oYABg9Co7LGbNmhWbN2+Oxx9/PK655ppYsmRJvPDCC/s9v6OjI3p7e4eOnp6eTzQwADB6lf1SSH19fZxyyikRETFv3rx48skn47bbbos77rjjQ88vlUpRKpU+2ZQAQE34xJ9jMTg4OOw9FADA4ausOxYdHR2xcOHCmDZtWuzZsyfuuuuu6Orqiocffnik5gMAakhZYbF79+74+te/Hjt27IimpqaYM2dOPPzww/GlL31ppOYDAGpIWWHx29/+dqTmAAAOAb4rBABIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIc0S1ByjXjBv/Uu0RKu6V5YuqPQIAHBB3LACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEhzRLUHOFy8snxRtUcAgBHnjgUAkEZYAABphAUAkEZYAABpygqLzs7OOOuss6KhoSEmTpwYl1xySWzZsmWkZgMAakxZYbFu3bpob2+PjRs3xiOPPBLvvvtuXHDBBdHf3z9S8wEANaSsPzd96KGHhj1etWpVTJw4Mbq7u+Pcc89NHQwAqD2f6HMsent7IyJi/Pjx+z1nYGAgBgYGhh739fV9kksCAKPYQb95c3BwMK6//vo455xzYvbs2fs9r7OzM5qamoaOlpaWg70kADDKHXRYtLe3x3PPPRerV6/+yPM6Ojqit7d36Ojp6TnYSwIAo9xBvRRy7bXXxgMPPBDr16+PqVOnfuS5pVIpSqXSQQ0HANSWssKiKIr4zne+E2vWrImurq6YOXPmSM0FANSgssKivb097rrrrrj//vujoaEhdu7cGRERTU1NcfTRR4/IgABA7SjrPRYrV66M3t7eOO+882LKlClDxz333DNS8wEANaTsl0IAAPbHd4UAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQ5ohqD3C4mHHjX6o9AoewV5YvqvYIABHhjgUAkEhYAABphAUAkEZYAABphAUAkEZYAABphAUAkEZYAABphAUAkEZYAABphAUAkEZYAABphAUAkEZYAABphAUAkEZYAABphAUAkEZYAABphAUAkEZYAABphAUAkEZYAABphAUAkEZYAABphAUAkEZYAABphAUAkEZYAABphAUAkEZYAABphAUAkEZYAABphAUAkOaIag8Ah4pXli+q9ggAVeeOBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGmEBQCQRlgAAGnKDov169fHxRdfHM3NzVFXVxf33XffCIwFANSissOiv78/5s6dGytWrBiJeQCAGnZEub+wcOHCWLhw4UjMAgDUuLLDolwDAwMxMDAw9Livr2+kLwkAVMmIv3mzs7Mzmpqaho6WlpaRviQAUCUjHhYdHR3R29s7dPT09Iz0JQGAKhnxl0JKpVKUSqWRvgwAMAr4HAsAIE3ZdyzefPPN2Lp169Djbdu2xebNm2P8+PExbdq01OEAgNpSdlhs2rQpvvjFLw49Xrp0aURELFmyJFatWpU2GABQe8oOi/POOy+KohiJWQCAGuc9FgBAGmEBAKQRFgBAGmEBAKQRFgBAmhH/5E04XMy48S/VHgH4f15ZvqjaIxyW3LEAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIcUe0BAGAkzLjxL9UeoeJeWb6o2iO4YwEA5BEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAECagwqLFStWxIwZM+Koo46K+fPnxxNPPJE9FwBQg8oOi3vuuSeWLl0ay5Yti6eeeirmzp0bF154YezevXsk5gMAakjZYXHrrbfGlVdeGVdccUWcdtppcfvtt8cxxxwTv/vd70ZiPgCghpQVFu+88050d3dHW1vbf/8HY8ZEW1tbbNiwIX04AKC2HFHOya+99lrs27cvJk2aNOz5SZMmxYsvvvihvzMwMBADAwNDj/v6+iIi4rmbL4zGxsZy5wUARrER/6uQzs7OaGpqGjpaWlpG+pIAQJWUFRYTJkyIsWPHxq5du4Y9v2vXrpg8efKH/k5HR0f09vYOHT09PQc/LQAwqpUVFvX19TFv3rxYu3bt0HODg4Oxdu3aaG1t/dDfKZVK0djYOOwAAA5NZb3HIiJi6dKlsWTJkvjc5z4XZ599dvz85z+P/v7+uOKKK0ZiPgCghpQdFpdddln85z//iZtuuil27twZn/3sZ+Ohhx76wBs6AYDDT11RFEUlL9jX1xdNTU3R29vrZREAqBEH+u+37woBANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANKU/ZHen9T7H/TZ19dX6UsDAAfp/X+3P+4DuyseFq+//npERLS0tFT60gDAJ7Rnz55oamra788rHhbjx4+PiIjt27d/5GC8p6+vL1paWqKnp8d3qxwA61Ue61Ue61U+a1ae0bxeRVHEnj17orm5+SPPq3hYjBnz3ts6mpqaRt2ijWaNjY3WqwzWqzzWqzzWq3zWrDyjdb0O5IaAN28CAGmEBQCQpuJhUSqVYtmyZVEqlSp96ZpkvcpjvcpjvcpjvcpnzcpzKKxXXfFxfzcCAHCAvBQCAKQRFgBAGmEBAKQRFgBAmoqGxYoVK2LGjBlx1FFHxfz58+OJJ56o5OVrxo9//OOoq6sbdpx66qnVHmtUWb9+fVx88cXR3NwcdXV1cd999w37eVEUcdNNN8WUKVPi6KOPjra2tnjppZeqM+wo8HHr9Y1vfOMDe+6iiy6qzrCjQGdnZ5x11lnR0NAQEydOjEsuuSS2bNky7Jy9e/dGe3t7nHDCCXHcccfFV77yldi1a1eVJq6uA1mv88477wN77Oqrr67SxNW1cuXKmDNnztCHYLW2tsaDDz449PNa31sVC4t77rknli5dGsuWLYunnnoq5s6dGxdeeGHs3r27UiPUlNNPPz127NgxdPz973+v9kijSn9/f8ydOzdWrFjxoT+/5ZZb4he/+EXcfvvt8fjjj8exxx4bF154Yezdu7fCk44OH7deEREXXXTRsD139913V3DC0WXdunXR3t4eGzdujEceeSTefffduOCCC6K/v3/onO9+97vx5z//Oe69995Yt25dvPrqq3HppZdWcerqOZD1ioi48sorh+2xW265pUoTV9fUqVNj+fLl0d3dHZs2bYrzzz8/Fi9eHM8//3xEHAJ7q6iQs88+u2hvbx96vG/fvqK5ubno7Oys1Ag1Y9myZcXcuXOrPUbNiIhizZo1Q48HBweLyZMnFz/72c+GnnvjjTeKUqlU3H333VWYcHT53/UqiqJYsmRJsXjx4qrMUwt2795dRESxbt26oije209HHnlkce+99w6d889//rOIiGLDhg3VGnPU+N/1Koqi+MIXvlBcd9111RtqlDv++OOL3/zmN4fE3qrIHYt33nknuru7o62tbei5MWPGRFtbW2zYsKESI9Scl156KZqbm+Okk06Kyy+/PLZv317tkWrGtm3bYufOncP2W1NTU8yfP99++whdXV0xceLEmDVrVlxzzTVD30RMRG9vb0T890sUu7u749133x22x0499dSYNm2aPRYfXK/33XnnnTFhwoSYPXt2dHR0xFtvvVWN8UaVffv2xerVq6O/vz9aW1sPib1VkS8he+2112Lfvn0xadKkYc9PmjQpXnzxxUqMUFPmz58fq1atilmzZsWOHTvi5ptvjs9//vPx3HPPRUNDQ7XHG/V27twZEfGh++39nzHcRRddFJdeemnMnDkzXn755fjhD38YCxcujA0bNsTYsWOrPV5VDQ4OxvXXXx/nnHNOzJ49OyLe22P19fUxbty4YefaYx++XhERX/va12L69OnR3NwczzzzTNxwww2xZcuW+NOf/lTFaavn2WefjdbW1ti7d28cd9xxsWbNmjjttNNi8+bNNb+3Kv7tpny8hQsXDv33nDlzYv78+TF9+vT4wx/+EN/61reqOBmHqq9+9atD/33GGWfEnDlz4uSTT46urq5YsGBBFServvb29njuuee8z+kA7W+9rrrqqqH/PuOMM2LKlCmxYMGCePnll+Pkk0+u9JhVN2vWrNi8eXP09vbGH//4x1iyZEmsW7eu2mOlqMhLIRMmTIixY8d+4F2tu3btismTJ1dihJo2bty4+MxnPhNbt26t9ig14f09Zb8dvJNOOikmTJhw2O+5a6+9Nh544IF47LHHYurUqUPPT548Od5555144403hp1/uO+x/a3Xh5k/f35ExGG7x+rr6+OUU06JefPmRWdnZ8ydOzduu+22Q2JvVSQs6uvrY968ebF27dqh5wYHB2Pt2rXR2tpaiRFq2ptvvhkvv/xyTJkypdqj1ISZM2fG5MmTh+23vr6+ePzxx+23A/Tvf/87Xn/99cN2zxVFEddee22sWbMmHn300Zg5c+awn8+bNy+OPPLIYXtsy5YtsX379sNyj33cen2YzZs3R0Qctnvsfw0ODsbAwMChsbcq9S7R1atXF6VSqVi1alXxwgsvFFdddVUxbty4YufOnZUaoWZ873vfK7q6uopt27YV//jHP4q2trZiwoQJxe7du6s92qixZ8+e4umnny6efvrpIiKKW2+9tXj66aeLf/3rX0VRFMXy5cuLcePGFffff3/xzDPPFIsXLy5mzpxZvP3221WevDo+ar327NlTfP/73y82bNhQbNu2rfjb3/5WnHnmmcWnP/3pYu/evdUevSquueaaoqmpqejq6ip27NgxdLz11ltD51x99dXFtGnTikcffbTYtGlT0draWrS2tlZx6ur5uPXaunVr8ZOf/KTYtGlTsW3btuL+++8vTjrppOLcc8+t8uTVceONNxbr1q0rtm3bVjzzzDPFjTfeWNTV1RV//etfi6Ko/b1VsbAoiqL45S9/WUybNq2or68vzj777GLjxo2VvHzNuOyyy4opU6YU9fX1xac+9anisssuK7Zu3VrtsUaVxx57rIiIDxxLliwpiuK9Pzn90Y9+VEyaNKkolUrFggULii1btlR36Cr6qPV66623igsuuKA48cQTiyOPPLKYPn16ceWVVx7W0f9haxURxe9///uhc95+++3i29/+dnH88ccXxxxzTPHlL3+52LFjR/WGrqKPW6/t27cX5557bjF+/PiiVCoVp5xySvGDH/yg6O3tre7gVfLNb36zmD59elFfX1+ceOKJxYIFC4aioihqf2/52nQAII3vCgEA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACDN/wHzKwo0l3Y4sQAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(data, bins=10, orientation='horizontal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "77e8fe80-9e2d-43d9-bd7c-476f2abad95c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='count', ylabel='Gender'>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# categorical data\n",
    "import seaborn as sns\n",
    "sns.countplot(df['Gender'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "84d9e9c9-204d-47fb-9e9f-ccfdd7c310ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='count', ylabel='Dependents'>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df.Dependents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8ce74a86-d62a-4183-a60f-d77d61759907",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (516875836.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[29], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    <Axes: xlabel='count', ylabel='Dependents'>\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "<Axes: xlabel='count', ylabel='Dependents'>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "",
   "name": ""
  },
  "language_info": {
   "name": ""
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
